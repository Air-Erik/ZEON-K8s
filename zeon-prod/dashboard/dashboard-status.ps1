#!/usr/bin/env powershell
# Kubernetes Dashboard Status and Access Script
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Dashboard –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø

param(
    [string]$Namespace = "kubernetes-dashboard",
    [switch]$StartPortForward = $false,
    [int]$Port = 8443,
    [switch]$ShowTokens = $false,
    [switch]$OpenBrowser = $false
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )

    switch ($Color) {
        "Red" { Write-Host $Message -ForegroundColor Red }
        "Green" { Write-Host $Message -ForegroundColor Green }
        "Yellow" { Write-Host $Message -ForegroundColor Yellow }
        "Blue" { Write-Host $Message -ForegroundColor Blue }
        "Cyan" { Write-Host $Message -ForegroundColor Cyan }
        "Magenta" { Write-Host $Message -ForegroundColor Magenta }
        "Gray" { Write-Host $Message -ForegroundColor Gray }
        default { Write-Host $Message }
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
function Test-Command {
    param([string]$Command)

    try {
        Get-Command $Command -ErrorAction Stop | Out-Null
        return $true
    } catch {
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Å—É—Ä—Å–∞
function Get-ResourceStatus {
    param(
        [string]$ResourceType,
        [string]$Namespace,
        [string]$LabelSelector = $null
    )

    $cmd = if ($LabelSelector) {
        "kubectl get $ResourceType -n $Namespace -l $LabelSelector --no-headers"
    } else {
        "kubectl get $ResourceType -n $Namespace --no-headers"
    }

    $result = Invoke-Expression $cmd 2>$null
    return $result
}

Write-ColorOutput "üîç Kubernetes Dashboard Status Check" "Magenta"
Write-ColorOutput "===================================" "Magenta"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
Write-ColorOutput "üõ†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:" "Blue"

if (Test-Command "kubectl") {
    Write-ColorOutput "  ‚úÖ kubectl - –¥–æ—Å—Ç—É–ø–µ–Ω" "Green"
} else {
    Write-ColorOutput "  ‚ùå kubectl - –Ω–µ –Ω–∞–π–¥–µ–Ω!" "Red"
    exit 1
}

if (Test-Command "helm") {
    Write-ColorOutput "  ‚úÖ helm - –¥–æ—Å—Ç—É–ø–µ–Ω" "Green"
} else {
    Write-ColorOutput "  ‚ö†Ô∏è  helm - –Ω–µ –Ω–∞–π–¥–µ–Ω (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)" "Yellow"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É
Write-ColorOutput "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É:" "Blue"

$clusterInfo = kubectl cluster-info --request-timeout=5s 2>$null
if ($LASTEXITCODE -eq 0) {
    Write-ColorOutput "  ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–ª–∞—Å—Ç–µ—Ä—É - OK" "Green"
    $currentContext = kubectl config current-context 2>$null
    Write-ColorOutput "  ‚îî‚îÄ‚îÄ –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: $currentContext" "Gray"
} else {
    Write-ColorOutput "  ‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É!" "Red"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ namespace
Write-ColorOutput "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ namespace:" "Blue"

$namespaceExists = kubectl get namespace $Namespace --ignore-not-found 2>$null
if ($namespaceExists) {
    Write-ColorOutput "  ‚úÖ Namespace '$Namespace' - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "Green"
} else {
    Write-ColorOutput "  ‚ùå Namespace '$Namespace' - –Ω–µ –Ω–∞–π–¥–µ–Ω!" "Red"
    Write-ColorOutput "  üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: kubectl create namespace $Namespace" "Yellow"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Helm —Ä–µ–ª–∏–∑–∞
Write-ColorOutput "üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ Helm —Ä–µ–ª–∏–∑–∞:" "Blue"

if (Test-Command "helm") {
    $helmRelease = helm list -n $Namespace --filter kubernetes-dashboard --short 2>$null
    if ($helmRelease) {
        Write-ColorOutput "  ‚úÖ Helm —Ä–µ–ª–∏–∑ 'kubernetes-dashboard' - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" "Green"
        $releaseInfo = helm status kubernetes-dashboard -n $Namespace --output json 2>$null | ConvertFrom-Json
        Write-ColorOutput "  ‚îî‚îÄ‚îÄ –°—Ç–∞—Ç—É—Å: $($releaseInfo.info.status)" "Gray"
        Write-ColorOutput "  ‚îî‚îÄ‚îÄ –í–µ—Ä—Å–∏—è: $($releaseInfo.chart.metadata.version)" "Gray"
    } else {
        Write-ColorOutput "  ‚ùå Helm —Ä–µ–ª–∏–∑ 'kubernetes-dashboard' - –Ω–µ –Ω–∞–π–¥–µ–Ω!" "Red"
        Write-ColorOutput "  üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: .\setup-dashboard-users.ps1" "Yellow"
    }
} else {
    Write-ColorOutput "  ‚ö†Ô∏è  Helm –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–ª–∏–∑–∞" "Yellow"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–≤
Write-ColorOutput "üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–≤ Dashboard:" "Blue"

$pods = Get-ResourceStatus "pods" $Namespace
if ($pods) {
    $podLines = $pods -split "`n" | Where-Object { $_ -match "dashboard|kong" }

    foreach ($podLine in $podLines) {
        $parts = $podLine -split '\s+'
        $podName = $parts[0]
        $ready = $parts[1]
        $status = $parts[2]

        if ($status -eq "Running" -and $ready -match "(\d+)/(\d+)" -and $matches[1] -eq $matches[2]) {
            Write-ColorOutput "  ‚úÖ $podName - $status ($ready)" "Green"
        } else {
            Write-ColorOutput "  ‚ùå $podName - $status ($ready)" "Red"
        }
    }
} else {
    Write-ColorOutput "  ‚ùå –ü–æ–¥—ã Dashboard –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!" "Red"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
Write-ColorOutput "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:" "Blue"

$services = Get-ResourceStatus "services" $Namespace
if ($services) {
    $serviceLines = $services -split "`n" | Where-Object { $_ -match "dashboard|kong" }

    foreach ($serviceLine in $serviceLines) {
        $parts = $serviceLine -split '\s+'
        $serviceName = $parts[0]
        $type = $parts[1]
        $clusterIP = $parts[2]
        $ports = $parts[4]

        Write-ColorOutput "  ‚úÖ $serviceName - $type ($clusterIP`:${ports})" "Green"
    }
} else {
    Write-ColorOutput "  ‚ùå –°–µ—Ä–≤–∏—Å—ã Dashboard –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!" "Red"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
Write-ColorOutput "üë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:" "Blue"

$serviceAccounts = kubectl get serviceaccount -n $Namespace -o jsonpath='{.items[*].metadata.name}' 2>$null
if ($serviceAccounts) {
    $users = $serviceAccounts -split ' ' | Where-Object { $_ -notmatch '^default$|^kubernetes-dashboard' }

    if ($users.Count -gt 0) {
        Write-ColorOutput "  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $($users.Count)" "Green"

        foreach ($user in $users) {
            $tokenFile = "tokens/$user-token.txt"
            $tokenExists = Test-Path $tokenFile

            if ($tokenExists) {
                Write-ColorOutput "  ‚îî‚îÄ‚îÄ $user - —Ç–æ–∫–µ–Ω –≥–æ—Ç–æ–≤" "Green"
            } else {
                Write-ColorOutput "  ‚îî‚îÄ‚îÄ $user - —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" "Yellow"
            }
        }
    } else {
        Write-ColorOutput "  ‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" "Yellow"
        Write-ColorOutput "  üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: .\setup-dashboard-users.ps1" "Yellow"
    }
} else {
    Write-ColorOutput "  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ServiceAccount'–æ–≤" "Red"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω—ã, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
if ($ShowTokens) {
    Write-ColorOutput "üîë –¢–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:" "Blue"

    $tokenFiles = Get-ChildItem -Path "tokens" -Filter "*-token.txt" -ErrorAction SilentlyContinue

    if ($tokenFiles) {
        foreach ($tokenFile in $tokenFiles) {
            $userName = $tokenFile.Name -replace '-token\.txt$', ''
            $tokenContent = Get-Content $tokenFile.FullName -Raw -ErrorAction SilentlyContinue

            if ($tokenContent) {
                $tokenPreview = $tokenContent.Substring(0, [Math]::Min(30, $tokenContent.Length)) + "..."
                Write-ColorOutput "  üîπ $userName" "Cyan"
                Write-ColorOutput "     ‚îî‚îÄ‚îÄ $tokenPreview" "Gray"
            }
        }
    } else {
        Write-ColorOutput "  ‚ùå –§–∞–π–ª—ã —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ tokens/" "Red"
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Ingress
Write-ColorOutput "üîÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ Ingress:" "Blue"

if (Test-Path "ingress-dashboard.yaml") {
    $ingress = kubectl get ingress -n $Namespace kubernetes-dashboard-ingress --ignore-not-found 2>$null
    if ($ingress) {
        Write-ColorOutput "  ‚úÖ Ingress –Ω–∞—Å—Ç—Ä–æ–µ–Ω" "Green"

        # –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Å—Ç –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
        $ingressContent = Get-Content "ingress-dashboard.yaml" -Raw
        if ($ingressContent -match 'host:\s*(.+)') {
            $hostName = $matches[1].Trim()
            Write-ColorOutput "  ‚îî‚îÄ‚îÄ –•–æ—Å—Ç: $hostName" "Gray"
        }
    } else {
        Write-ColorOutput "  ‚ö†Ô∏è  Ingress –Ω–µ –ø—Ä–∏–º–µ–Ω—ë–Ω" "Yellow"
        Write-ColorOutput "  üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: kubectl apply -f ingress-dashboard.yaml" "Yellow"
    }
} else {
    Write-ColorOutput "  ‚ö†Ô∏è  –§–∞–π–ª ingress-dashboard.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω" "Yellow"
}

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ—Å—Ç—É–ø—É
Write-ColorOutput "üåê –î–æ—Å—Ç—É–ø –∫ Dashboard:" "Blue"

$kongService = kubectl get service -n $Namespace kubernetes-dashboard-kong-proxy --ignore-not-found 2>$null
if ($kongService) {
    Write-ColorOutput "  üì° Port-forward:" "Cyan"
    Write-ColorOutput "     kubectl -n $Namespace port-forward svc/kubernetes-dashboard-kong-proxy ${Port}:443" "Gray"
    Write-ColorOutput "     –ó–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ: https://localhost:$Port" "Gray"

    if ($StartPortForward) {
        Write-ColorOutput "  üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º port-forward..." "Yellow"

        if ($OpenBrowser) {
            # –ó–∞–ø—É—Å–∫–∞–µ–º port-forward –≤ —Ñ–æ–Ω–µ
            Start-Process -FilePath "kubectl" -ArgumentList "-n $Namespace port-forward svc/kubernetes-dashboard-kong-proxy ${Port}:443" -WindowStyle Hidden
            Start-Sleep -Seconds 2

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            Start-Process "https://localhost:$Port"
            Write-ColorOutput "  ‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç!" "Green"
        } else {
            # –ó–∞–ø—É—Å–∫–∞–µ–º port-forward –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
            kubectl -n $Namespace port-forward svc/kubernetes-dashboard-kong-proxy ${Port}:443
        }
    }
} else {
    Write-ColorOutput "  ‚ùå –°–µ—Ä–≤–∏—Å Kong proxy –Ω–µ –Ω–∞–π–¥–µ–Ω!" "Red"
}

# –†–µ–∑—é–º–µ
Write-ColorOutput "üìä –†–µ–∑—é–º–µ:" "Blue"

# –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç—É—Å–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
$allPods = Get-ResourceStatus "pods" $Namespace
$dashboardPods = if ($allPods) {
    $allPods -split "`n" | Where-Object { $_ -match "dashboard|kong" }
} else {
    @()
}

$podsOK = 0
foreach ($podLine in $dashboardPods) {
    if ($podLine -match '\s+') {
        $parts = $podLine -split '\s+'
        if ($parts.Length -ge 3) {
            $ready = $parts[1]
            $status = $parts[2]

            if ($status -eq "Running" -and $ready -match "(\d+)/(\d+)" -and $matches[1] -eq $matches[2]) {
                $podsOK++
            }
        }
    }
}

$servicesOK = (Get-ResourceStatus "services" $Namespace | Where-Object { $_ -match "dashboard|kong" }).Count
$usersCount = if ($serviceAccounts) { ($serviceAccounts -split ' ' | Where-Object { $_ -notmatch '^default$|^kubernetes-dashboard' }).Count } else { 0 }

if ($podsOK -gt 0 -and $servicesOK -gt 0) {
    Write-ColorOutput "  ‚úÖ Dashboard –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!" "Green"
} elseif ($podsOK -gt 0) {
    Write-ColorOutput "  ‚ö†Ô∏è  Dashboard —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤" "Yellow"
} else {
    Write-ColorOutput "  ‚ùå Dashboard –Ω–µ –≥–æ—Ç–æ–≤!" "Red"
}

Write-ColorOutput "  ‚îî‚îÄ‚îÄ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –ø–æ–¥–æ–≤: $podsOK" "Gray"
Write-ColorOutput "  ‚îî‚îÄ‚îÄ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: $servicesOK" "Gray"
Write-ColorOutput "  ‚îî‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $usersCount" "Gray"

Write-ColorOutput "===================================" "Magenta"

# –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
Write-ColorOutput "üí° –ü–æ–ª–µ–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:" "Yellow"
Write-ColorOutput "  -StartPortForward   : –ó–∞–ø—É—Å—Ç–∏—Ç—å port-forward" "Gray"
Write-ColorOutput "  -OpenBrowser        : –û—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä (—Å -StartPortForward)" "Gray"
Write-ColorOutput "  -ShowTokens         : –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é —Ç–æ–∫–µ–Ω–æ–≤" "Gray"
Write-ColorOutput "  -Port <number>      : –£–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç –¥–ª—è port-forward (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8443)" "Gray"
Write-ColorOutput "  -Namespace <name>   : –£–∫–∞–∑–∞—Ç—å namespace (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: kubernetes-dashboard)" "Gray"

#!/usr/bin/env powershell
# Ingress NGINX Setup Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ingress-nginx controller —á–µ—Ä–µ–∑ Helm

param(
    [string]$Namespace = "ingress-nginx",
    [string]$ReleaseName = "ingress-nginx",
    [string]$ServiceType = "LoadBalancer",
    [switch]$EnableMetrics = $true,
    [switch]$SkipDashboardIngress = $false,
    [switch]$Force = $false
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )

    switch ($Color) {
        "Red" { Write-Host $Message -ForegroundColor Red }
        "Green" { Write-Host $Message -ForegroundColor Green }
        "Yellow" { Write-Host $Message -ForegroundColor Yellow }
        "Blue" { Write-Host $Message -ForegroundColor Blue }
        "Cyan" { Write-Host $Message -ForegroundColor Cyan }
        "Magenta" { Write-Host $Message -ForegroundColor Magenta }
        "Gray" { Write-Host $Message -ForegroundColor Gray }
        default { Write-Host $Message }
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
function Test-Command {
    param([string]$Command)

    try {
        Get-Command $Command -ErrorAction Stop | Out-Null
        return $true
    } catch {
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è Helm —Ä–µ–ª–∏–∑–∞
function Test-HelmRelease {
    param(
        [string]$ReleaseName,
        [string]$Namespace
    )

    $release = helm list -n $Namespace --filter $ReleaseName --short 2>$null
    return $release -ne $null -and $release.Length -gt 0
}

Write-ColorOutput "üåê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ingress NGINX Controller" "Blue"
Write-ColorOutput "=====================================" "Blue"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
Write-ColorOutput "üõ†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:" "Yellow"

if (-not (Test-Command "kubectl")) {
    Write-ColorOutput "‚ùå kubectl –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ kubectl." "Red"
    exit 1
}
Write-ColorOutput "  ‚úÖ kubectl - –¥–æ—Å—Ç—É–ø–µ–Ω" "Green"

if (-not (Test-Command "helm")) {
    Write-ColorOutput "‚ùå helm –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Helm." "Red"
    exit 1
}
Write-ColorOutput "  ‚úÖ helm - –¥–æ—Å—Ç—É–ø–µ–Ω" "Green"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É
Write-ColorOutput "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É:" "Yellow"

$clusterInfo = kubectl cluster-info --request-timeout=5s 2>$null
if ($LASTEXITCODE -ne 0) {
    Write-ColorOutput "‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É!" "Red"
    exit 1
}

$currentContext = kubectl config current-context 2>$null
Write-ColorOutput "  ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–ª–∞—Å—Ç–µ—Ä—É - OK" "Green"
Write-ColorOutput "  ‚îî‚îÄ‚îÄ –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: $currentContext" "Gray"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–ª–∏–∑–∞
if (Test-HelmRelease $ReleaseName $Namespace) {
    if (-not $Force) {
        Write-ColorOutput "‚ö†Ô∏è  Ingress NGINX —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!" "Yellow"
        Write-ColorOutput "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -Force –¥–ª—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏" "Yellow"
        exit 0
    } else {
        Write-ColorOutput "üîÑ –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–ª–∏–∑..." "Yellow"
        helm uninstall $ReleaseName -n $Namespace
        Start-Sleep -Seconds 5
    }
}

# –®–∞–≥ 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
Write-ColorOutput "üì¶ –®–∞–≥ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Helm —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è" "Yellow"

Write-ColorOutput "  ‚îî‚îÄ‚îÄ –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ingress-nginx..." "Cyan"
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx

if ($LASTEXITCODE -ne 0) {
    Write-ColorOutput "    ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è" "Red"
    exit 1
}

Write-ColorOutput "  ‚îî‚îÄ‚îÄ –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å..." "Cyan"
helm repo update

if ($LASTEXITCODE -ne 0) {
    Write-ColorOutput "    ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤" "Red"
    exit 1
}

Write-ColorOutput "  ‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω!" "Green"

# –®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ingress-nginx
Write-ColorOutput "üöÄ –®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ingress NGINX Controller" "Yellow"

# –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
$installArgs = @(
    "install", $ReleaseName, "ingress-nginx/ingress-nginx",
    "--namespace", $Namespace, "--create-namespace",
    "--set", "controller.service.type=$ServiceType"
)

if ($EnableMetrics) {
    $installArgs += "--set", "controller.metrics.enabled=true"
}

# –û—Ç–∫–ª—é—á–∞–µ–º PodSecurityPolicy –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
$installArgs += "--set", "controller.podSecurityPolicy.enabled=false"

Write-ColorOutput "  ‚îî‚îÄ‚îÄ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Ingress NGINX Controller..." "Cyan"
Write-ColorOutput "      Namespace: $Namespace" "Gray"
Write-ColorOutput "      Service Type: $ServiceType" "Gray"
Write-ColorOutput "      Metrics: $EnableMetrics" "Gray"

& helm @installArgs

if ($LASTEXITCODE -ne 0) {
    Write-ColorOutput "    ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Ingress NGINX" "Red"
    exit 1
}

Write-ColorOutput "  ‚úÖ Ingress NGINX Controller —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!" "Green"

# –®–∞–≥ 3: –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
Write-ColorOutput "‚è≥ –®–∞–≥ 3: –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–æ–≤" "Yellow"

Write-ColorOutput "  ‚îî‚îÄ‚îÄ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ –ø–æ–¥–æ–≤..." "Cyan"

$maxWaitTime = 180 # 3 –º–∏–Ω—É—Ç—ã
$startTime = Get-Date

do {
    Start-Sleep -Seconds 5
    $pods = kubectl get pods -n $Namespace --no-headers 2>$null

    if ($pods) {
        $readyPods = ($pods -split "`n" | Where-Object { $_ -match '\s+1/1\s+Running' }).Count
        $totalPods = ($pods -split "`n").Count

        Write-ColorOutput "    ‚îî‚îÄ‚îÄ –ì–æ—Ç–æ–≤—ã—Ö –ø–æ–¥–æ–≤: $readyPods/$totalPods" "Gray"

        if ($readyPods -eq $totalPods -and $totalPods -gt 0) {
            Write-ColorOutput "  ‚úÖ –í—Å–µ –ø–æ–¥—ã –≥–æ—Ç–æ–≤—ã!" "Green"
            break
        }
    }

    $elapsedTime = (Get-Date) - $startTime
    if ($elapsedTime.TotalSeconds -gt $maxWaitTime) {
        Write-ColorOutput "  ‚ö†Ô∏è  –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è, –Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..." "Yellow"
        break
    }
} while ($true)

# –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
Write-ColorOutput "üîç –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏" "Yellow"

Write-ColorOutput "  ‚îî‚îÄ‚îÄ –ü–æ–¥—ã:" "Cyan"
$pods = kubectl get pods -n $Namespace --no-headers 2>$null
if ($pods) {
    foreach ($podLine in ($pods -split "`n")) {
        $parts = $podLine -split '\s+'
        if ($parts.Length -ge 3) {
            $podName = $parts[0]
            $ready = $parts[1]
            $status = $parts[2]

            if ($status -eq "Running" -and $ready -match "1/1") {
                Write-ColorOutput "    ‚úÖ $podName - $status ($ready)" "Green"
            } else {
                Write-ColorOutput "    ‚ö†Ô∏è  $podName - $status ($ready)" "Yellow"
            }
        }
    }
} else {
    Write-ColorOutput "    ‚ùå –ü–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" "Red"
}

Write-ColorOutput "  ‚îî‚îÄ‚îÄ –°–µ—Ä–≤–∏—Å—ã:" "Cyan"
$services = kubectl get services -n $Namespace --no-headers 2>$null
if ($services) {
    foreach ($serviceLine in ($services -split "`n")) {
        $parts = $serviceLine -split '\s+'
        if ($parts.Length -ge 4) {
            $serviceName = $parts[0]
            $serviceType = $parts[1]
            $clusterIP = $parts[2]
            $externalIP = $parts[3]
            $ports = $parts[4]

            Write-ColorOutput "    ‚úÖ $serviceName - $serviceType" "Green"
            if ($serviceType -eq "LoadBalancer") {
                if ($externalIP -eq "<pending>") {
                    Write-ColorOutput "      ‚îî‚îÄ‚îÄ External IP: –æ–∂–∏–¥–∞–Ω–∏–µ..." "Yellow"
                } else {
                    Write-ColorOutput "      ‚îî‚îÄ‚îÄ External IP: $externalIP" "Gray"
                }
            }
        }
    }
} else {
    Write-ColorOutput "    ‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" "Red"
}

# –®–∞–≥ 5: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Dashboard Ingress (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
if (-not $SkipDashboardIngress -and (Test-Path "ingress-dashboard.yaml")) {
    Write-ColorOutput "üîó –®–∞–≥ 5: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Dashboard Ingress" "Yellow"

    Write-ColorOutput "  ‚îî‚îÄ‚îÄ –ü—Ä–∏–º–µ–Ω—è–µ–º ingress-dashboard.yaml..." "Cyan"
    kubectl apply -f ingress-dashboard.yaml

    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput "  ‚úÖ Dashboard Ingress –ø—Ä–∏–º–µ–Ω—ë–Ω!" "Green"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ—Å—Ç–µ
        $ingressContent = Get-Content "ingress-dashboard.yaml" -Raw
        if ($ingressContent -match 'host:\s*(.+)') {
            $hostName = $matches[1].Trim()
            Write-ColorOutput "  ‚îî‚îÄ‚îÄ Dashboard –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://$hostName" "Gray"
        }
    } else {
        Write-ColorOutput "  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è Dashboard Ingress" "Red"
    }
}

# –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
Write-ColorOutput "üìã –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" "Yellow"

Write-ColorOutput "‚úÖ Ingress NGINX Controller —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!" "Green"

Write-ColorOutput "üåê –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" "Cyan"
Write-ColorOutput "  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞" "White"
Write-ColorOutput "  kubectl get pods -n $Namespace" "Gray"
Write-ColorOutput "  kubectl get services -n $Namespace" "Gray"
Write-ColorOutput "" "White"
Write-ColorOutput "  # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤" "White"
Write-ColorOutput "  kubectl logs -n $Namespace -l app.kubernetes.io/name=ingress-nginx" "Gray"
Write-ColorOutput "" "White"
Write-ColorOutput "  # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ingress —Ä–µ—Å—É—Ä—Å–æ–≤" "White"
Write-ColorOutput "  kubectl get ingress --all-namespaces" "Gray"

if ($ServiceType -eq "LoadBalancer") {
    Write-ColorOutput "üí° –°–æ–≤–µ—Ç:" "Yellow"
    Write-ColorOutput "  –ï—Å–ª–∏ External IP –æ—Å—Ç–∞–µ—Ç—Å—è <pending>, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ:" "White"
    Write-ColorOutput "  - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å MetalLB (–¥–ª—è bare metal)" "Gray"
    Write-ColorOutput "  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å NodePort –≤–º–µ—Å—Ç–æ LoadBalancer" "Gray"
    Write-ColorOutput "  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É LoadBalancer –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ" "Gray"
}

Write-ColorOutput "=====================================" "Blue"
Write-ColorOutput "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" "Green"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫—Ä–∏–ø—Ç–∞
Write-ColorOutput "üí° –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫—Ä–∏–ø—Ç–∞:" "Yellow"
Write-ColorOutput "  -ServiceType <type>        : –¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞ (LoadBalancer, NodePort, ClusterIP)" "Gray"
Write-ColorOutput "  -EnableMetrics            : –í–∫–ª—é—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: true)" "Gray"
Write-ColorOutput "  -SkipDashboardIngress     : –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Dashboard Ingress" "Gray"
Write-ColorOutput "  -Force                    : –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –µ—Å–ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" "Gray"
Write-ColorOutput "  -Namespace <name>         : Namespace –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ingress-nginx)" "Gray"

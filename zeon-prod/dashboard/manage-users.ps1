#!/usr/bin/env powershell
# Kubernetes Dashboard User Management Script
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Kubernetes Dashboard

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("add", "remove", "list", "token")]
    [string]$Action,

    [string]$UserName,

    [ValidateSet("view", "edit", "admin", "cluster-admin")]
    [string]$Role = "edit",

    [string]$Namespace = "kubernetes-dashboard",

    [switch]$Force = $false
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )

    switch ($Color) {
        "Red" { Write-Host $Message -ForegroundColor Red }
        "Green" { Write-Host $Message -ForegroundColor Green }
        "Yellow" { Write-Host $Message -ForegroundColor Yellow }
        "Blue" { Write-Host $Message -ForegroundColor Blue }
        "Cyan" { Write-Host $Message -ForegroundColor Cyan }
        "Magenta" { Write-Host $Message -ForegroundColor Magenta }
        default { Write-Host $Message }
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Å—É—Ä—Å
function Test-KubernetesResource {
    param(
        [string]$ResourceType,
        [string]$ResourceName,
        [string]$Namespace = $null
    )

    $cmd = if ($Namespace) {
        "kubectl get $ResourceType $ResourceName -n $Namespace --ignore-not-found"
    } else {
        "kubectl get $ResourceType $ResourceName --ignore-not-found"
    }

    $result = Invoke-Expression $cmd 2>$null
    return $result -ne $null -and $result.Length -gt 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è YAML –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ —Å–µ–∫—Ä–µ—Ç–∞
function New-SecretManifest {
    param(
        [string]$UserName,
        [string]$Namespace
    )

    return @"
apiVersion: v1
kind: Secret
metadata:
  name: $UserName-token
  namespace: $Namespace
  annotations:
    kubernetes.io/service-account.name: $UserName
type: kubernetes.io/service-account-token
"@
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫
function Initialize-DirectoryStructure {
    if (-not (Test-Path "tokens")) {
        New-Item -ItemType Directory -Path "tokens" -Force | Out-Null
    }

    if (-not (Test-Path "manifests")) {
        New-Item -ItemType Directory -Path "manifests" -Force | Out-Null
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function Add-DashboardUser {
    param(
        [string]$UserName,
        [string]$Role,
        [string]$Namespace
    )

    Write-ColorOutput "‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $UserName" "Blue"

    # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    Initialize-DirectoryStructure

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (Test-KubernetesResource "serviceaccount" $UserName $Namespace) {
        if (-not $Force) {
            Write-ColorOutput "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $UserName —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -Force –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è." "Red"
            return $false
        } else {
            Write-ColorOutput "üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $UserName" "Yellow"
            Remove-DashboardUser -UserName $UserName -Namespace $Namespace
        }
    }

    # –°–æ–∑–¥–∞—ë–º ServiceAccount
    Write-ColorOutput "  ‚îî‚îÄ‚îÄ –°–æ–∑–¥–∞—ë–º ServiceAccount..." "Cyan"
    kubectl create serviceaccount $UserName -n $Namespace

    if ($LASTEXITCODE -ne 0) {
        Write-ColorOutput "    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ServiceAccount" "Red"
        return $false
    }

    # –°–æ–∑–¥–∞—ë–º ClusterRoleBinding
    $bindingName = "$UserName-binding"
    Write-ColorOutput "  ‚îî‚îÄ‚îÄ –°–æ–∑–¥–∞—ë–º ClusterRoleBinding ($Role)..." "Cyan"
    kubectl create clusterrolebinding $bindingName `
        --clusterrole=$Role `
        --serviceaccount="$Namespace`:$UserName"

    if ($LASTEXITCODE -ne 0) {
        Write-ColorOutput "    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ClusterRoleBinding" "Red"
        return $false
    }

    # –°–æ–∑–¥–∞—ë–º Secret –¥–ª—è —Ç–æ–∫–µ–Ω–∞
    $secretName = "$UserName-token"
    $secretFile = "manifests/secret.$UserName.yaml"

    Write-ColorOutput "  ‚îî‚îÄ‚îÄ –°–æ–∑–¥–∞—ë–º Secret –¥–ª—è —Ç–æ–∫–µ–Ω–∞..." "Cyan"
    $secretContent = New-SecretManifest -UserName $UserName -Namespace $Namespace
    $secretContent | Out-File -FilePath $secretFile -Encoding UTF8

    kubectl apply -f $secretFile

    if ($LASTEXITCODE -ne 0) {
        Write-ColorOutput "    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Secret" "Red"
        return $false
    }

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    Write-ColorOutput "  ‚îî‚îÄ‚îÄ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω..." "Cyan"
    Start-Sleep -Seconds 3

    $maxRetries = 10
    $retryCount = 0

    do {
        $token = kubectl get secret $secretName -n $Namespace -o "go-template={{.data.token | base64decode}}" 2>$null

        if ($token -and $token.Length -gt 10) {
            $tokenFile = "tokens/$UserName-token.txt"
            $token | Out-File -FilePath $tokenFile -Encoding UTF8 -NoNewline
            Write-ColorOutput "    ‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ $tokenFile" "Green"
            break
        } else {
            $retryCount++
            Write-ColorOutput "    ‚è≥ –ñ–¥—ë–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ $retryCount/$maxRetries)" "Yellow"
            Start-Sleep -Seconds 2
        }
    } while ($retryCount -lt $maxRetries)

    if ($retryCount -eq $maxRetries) {
        Write-ColorOutput "    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω" "Red"
        return $false
    }

    Write-ColorOutput "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $UserName —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!" "Green"
    return $true
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function Remove-DashboardUser {
    param(
        [string]$UserName,
        [string]$Namespace
    )

    Write-ColorOutput "üóëÔ∏è  –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $UserName" "Blue"

    # –£–¥–∞–ª—è–µ–º ServiceAccount
    if (Test-KubernetesResource "serviceaccount" $UserName $Namespace) {
        Write-ColorOutput "  ‚îî‚îÄ‚îÄ –£–¥–∞–ª—è–µ–º ServiceAccount..." "Cyan"
        kubectl delete serviceaccount $UserName -n $Namespace
    }

    # –£–¥–∞–ª—è–µ–º ClusterRoleBinding
    $bindingName = "$UserName-binding"
    if (Test-KubernetesResource "clusterrolebinding" $bindingName) {
        Write-ColorOutput "  ‚îî‚îÄ‚îÄ –£–¥–∞–ª—è–µ–º ClusterRoleBinding..." "Cyan"
        kubectl delete clusterrolebinding $bindingName
    }

    # –£–¥–∞–ª—è–µ–º Secret
    $secretName = "$UserName-token"
    if (Test-KubernetesResource "secret" $secretName $Namespace) {
        Write-ColorOutput "  ‚îî‚îÄ‚îÄ –£–¥–∞–ª—è–µ–º Secret..." "Cyan"
        kubectl delete secret $secretName -n $Namespace
    }

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
    $secretFile = "manifests/secret.$UserName.yaml"
    $tokenFile = "tokens/$UserName-token.txt"

    if (Test-Path $secretFile) {
        Write-ColorOutput "  ‚îî‚îÄ‚îÄ –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞..." "Cyan"
        Remove-Item $secretFile
    }

    if (Test-Path $tokenFile) {
        Write-ColorOutput "  ‚îî‚îÄ‚îÄ –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Ç–æ–∫–µ–Ω–∞..." "Cyan"
        Remove-Item $tokenFile
    }

    Write-ColorOutput "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $UserName —É–¥–∞–ª—ë–Ω!" "Green"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function Get-UserToken {
    param(
        [string]$UserName,
        [string]$Namespace
    )

    $secretName = "$UserName-token"
    $tokenFile = "tokens/$UserName-token.txt"

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    Initialize-DirectoryStructure

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (-not (Test-KubernetesResource "serviceaccount" $UserName $Namespace)) {
        Write-ColorOutput "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $UserName –Ω–µ –Ω–∞–π–¥–µ–Ω!" "Red"
        return
    }

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    Write-ColorOutput "üîë –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $UserName" "Blue"

    $token = kubectl get secret $secretName -n $Namespace -o "go-template={{.data.token | base64decode}}" 2>$null

    if ($token -and $token.Length -gt 10) {
        $token | Out-File -FilePath $tokenFile -Encoding UTF8 -NoNewline
        Write-ColorOutput "‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ $tokenFile" "Green"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã —Ç–æ–∫–µ–Ω–∞
        $tokenPreview = $token.Substring(0, 20) + "..." + $token.Substring($token.Length - 20)
        Write-ColorOutput "üîç –ü—Ä–µ–≤—å—é —Ç–æ–∫–µ–Ω–∞: $tokenPreview" "Cyan"
    } else {
        Write-ColorOutput "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è $UserName" "Red"
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function Get-DashboardUsers {
    param(
        [string]$Namespace
    )

    Write-ColorOutput "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Dashboard:" "Blue"
    Write-ColorOutput "=====================================" "Blue"

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ServiceAccount'—ã –≤ namespace
    $serviceAccounts = kubectl get serviceaccount -n $Namespace -o jsonpath='{.items[*].metadata.name}' 2>$null

    if (-not $serviceAccounts) {
        Write-ColorOutput "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ ServiceAccount'–æ–≤ –≤ namespace $Namespace" "Red"
        return
    }

    $users = $serviceAccounts -split ' ' | Where-Object { $_ -notmatch '^default$|^kubernetes-dashboard' }

    if ($users.Count -eq 0) {
        Write-ColorOutput "üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" "Yellow"
        return
    }

    foreach ($user in $users) {
        Write-ColorOutput "üîπ $user" "Cyan"

        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ ClusterRoleBinding
        $bindingName = "$user-binding"
        $roleInfo = kubectl get clusterrolebinding $bindingName -o jsonpath='{.roleRef.name}' 2>$null

        if ($roleInfo) {
            Write-ColorOutput "   ‚îî‚îÄ‚îÄ –†–æ–ª—å: $roleInfo" "White"
        } else {
            Write-ColorOutput "   ‚îî‚îÄ‚îÄ –†–æ–ª—å: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" "Yellow"
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        $tokenFile = "tokens/$user-token.txt"
        if (Test-Path $tokenFile) {
            $tokenLength = (Get-Content $tokenFile -Raw).Length
            Write-ColorOutput "   ‚îî‚îÄ‚îÄ –¢–æ–∫–µ–Ω: –µ—Å—Ç—å (–¥–ª–∏–Ω–∞: $tokenLength —Å–∏–º–≤–æ–ª–æ–≤)" "Green"
        } else {
            Write-ColorOutput "   ‚îî‚îÄ‚îÄ –¢–æ–∫–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" "Red"
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Secret
        $secretName = "$user-token"
        if (Test-KubernetesResource "secret" $secretName $Namespace) {
            Write-ColorOutput "   ‚îî‚îÄ‚îÄ Secret: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "Green"
        } else {
            Write-ColorOutput "   ‚îî‚îÄ‚îÄ Secret: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" "Red"
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
        $secretFile = "manifests/secret.$user.yaml"
        if (Test-Path $secretFile) {
            Write-ColorOutput "   ‚îî‚îÄ‚îÄ –ú–∞–Ω–∏—Ñ–µ—Å—Ç: –µ—Å—Ç—å" "Green"
        } else {
            Write-ColorOutput "   ‚îî‚îÄ‚îÄ –ú–∞–Ω–∏—Ñ–µ—Å—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" "Yellow"
        }

        Write-ColorOutput "" "White"
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
Write-ColorOutput "üîß Kubernetes Dashboard User Manager" "Magenta"
Write-ColorOutput "====================================" "Magenta"

switch ($Action) {
    "add" {
        if (-not $UserName) {
            Write-ColorOutput "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -UserName <–∏–º—è>" "Red"
            exit 1
        }

        Add-DashboardUser -UserName $UserName -Role $Role -Namespace $Namespace
    }

    "remove" {
        if (-not $UserName) {
            Write-ColorOutput "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -UserName <–∏–º—è>" "Red"
            exit 1
        }

        if (-not $Force) {
            $confirm = Read-Host "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '$UserName'? (y/N)"
            if ($confirm -notmatch '^[yY]') {
                Write-ColorOutput "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞" "Yellow"
                exit 0
            }
        }

        Remove-DashboardUser -UserName $UserName -Namespace $Namespace
    }

    "list" {
        Get-DashboardUsers -Namespace $Namespace
    }

    "token" {
        if (-not $UserName) {
            Write-ColorOutput "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -UserName <–∏–º—è>" "Red"
            exit 1
        }

        Get-UserToken -UserName $UserName -Namespace $Namespace
    }
}

Write-ColorOutput "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" "Green"

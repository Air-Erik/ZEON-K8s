#!/usr/bin/env powershell
# Kubernetes Dashboard User Setup Script
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è Kubernetes Dashboard

param(
    [string]$Namespace = "kubernetes-dashboard",
    [switch]$SkipHelmInstall = $false,
    [switch]$ForceRecreate = $false
)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ä–æ–ª–∏
$Users = @{
    "admin" = @{
        "role" = "cluster-admin"
        "description" = "Super-admin —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏"
    }
    "air-erik" = @{
        "role" = "edit"
        "description" = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    }
    "soothemysoul" = @{
        "role" = "edit"
        "description" = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )

    switch ($Color) {
        "Red" { Write-Host $Message -ForegroundColor Red }
        "Green" { Write-Host $Message -ForegroundColor Green }
        "Yellow" { Write-Host $Message -ForegroundColor Yellow }
        "Blue" { Write-Host $Message -ForegroundColor Blue }
        "Cyan" { Write-Host $Message -ForegroundColor Cyan }
        default { Write-Host $Message }
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Å—É—Ä—Å
function Test-KubernetesResource {
    param(
        [string]$ResourceType,
        [string]$ResourceName,
        [string]$Namespace = $null
    )

    $cmd = if ($Namespace) {
        "kubectl get $ResourceType $ResourceName -n $Namespace --ignore-not-found"
    } else {
        "kubectl get $ResourceType $ResourceName --ignore-not-found"
    }

    $result = Invoke-Expression $cmd 2>$null
    return $result -ne $null -and $result.Length -gt 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è YAML –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ —Å–µ–∫—Ä–µ—Ç–∞
function New-SecretManifest {
    param(
        [string]$UserName,
        [string]$Namespace
    )

    return @"
apiVersion: v1
kind: Secret
metadata:
  name: $UserName-token
  namespace: $Namespace
  annotations:
    kubernetes.io/service-account.name: $UserName
type: kubernetes.io/service-account-token
"@
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫
function Initialize-DirectoryStructure {
    Write-ColorOutput "üìÅ –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫..." "Cyan"

    if (-not (Test-Path "tokens")) {
        New-Item -ItemType Directory -Path "tokens" -Force | Out-Null
        Write-ColorOutput "  ‚îî‚îÄ‚îÄ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: tokens/" "Gray"
    }

    if (-not (Test-Path "manifests")) {
        New-Item -ItemType Directory -Path "manifests" -Force | Out-Null
        Write-ColorOutput "  ‚îî‚îÄ‚îÄ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: manifests/" "Gray"
    }
}

Write-ColorOutput "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Kubernetes Dashboard" "Blue"
Write-ColorOutput "=====================================================" "Blue"

# –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
Initialize-DirectoryStructure

# –®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Helm Chart (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–∞)
if (-not $SkipHelmInstall) {
    Write-ColorOutput "üì¶ –®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Kubernetes Dashboard —á–µ—Ä–µ–∑ Helm" "Yellow"

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    Write-ColorOutput "  ‚îî‚îÄ‚îÄ –î–æ–±–∞–≤–ª—è–µ–º Helm —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..." "Cyan"
    helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
    Write-ColorOutput "  ‚îî‚îÄ‚îÄ –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å..." "Cyan"
    helm repo update

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º chart
    Write-ColorOutput "  ‚îî‚îÄ‚îÄ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Dashboard..." "Cyan"
    helm install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard `
        --namespace $Namespace --create-namespace `
        --set metricsScraper.enabled=true `
        --set adminAccessLog.enabled=true

    Write-ColorOutput "  ‚úÖ Dashboard —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!" "Green"
} else {
    Write-ColorOutput "‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Helm Chart" "Yellow"
}

# –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ ServiceAccount'–æ–≤
Write-ColorOutput "üë• –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ ServiceAccount'–æ–≤" "Yellow"

foreach ($username in $Users.Keys) {
    $userInfo = $Users[$username]

    if (Test-KubernetesResource "serviceaccount" $username $Namespace) {
        if ($ForceRecreate) {
            Write-ColorOutput "  ‚îî‚îÄ‚îÄ –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ServiceAccount: $username" "Cyan"
            kubectl delete serviceaccount $username -n $Namespace
        } else {
            Write-ColorOutput "  ‚îî‚îÄ‚îÄ ServiceAccount $username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º" "Yellow"
            continue
        }
    }

    Write-ColorOutput "  ‚îî‚îÄ‚îÄ –°–æ–∑–¥–∞—ë–º ServiceAccount: $username ($($userInfo.description))" "Cyan"
    kubectl create serviceaccount $username -n $Namespace

    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput "    ‚úÖ ServiceAccount $username —Å–æ–∑–¥–∞–Ω!" "Green"
    } else {
        Write-ColorOutput "    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ServiceAccount $username" "Red"
    }
}

# –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ (ClusterRoleBinding)
Write-ColorOutput "üîê –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞" "Yellow"

foreach ($username in $Users.Keys) {
    $userInfo = $Users[$username]
    $bindingName = "$username-binding"

    if (Test-KubernetesResource "clusterrolebinding" $bindingName) {
        if ($ForceRecreate) {
            Write-ColorOutput "  ‚îî‚îÄ‚îÄ –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ClusterRoleBinding: $bindingName" "Cyan"
            kubectl delete clusterrolebinding $bindingName
        } else {
            Write-ColorOutput "  ‚îî‚îÄ‚îÄ ClusterRoleBinding $bindingName —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º" "Yellow"
            continue
        }
    }

    Write-ColorOutput "  ‚îî‚îÄ‚îÄ –°–æ–∑–¥–∞—ë–º ClusterRoleBinding: $bindingName (—Ä–æ–ª—å: $($userInfo.role))" "Cyan"
    kubectl create clusterrolebinding $bindingName `
        --clusterrole=$($userInfo.role) `
        --serviceaccount="$Namespace`:$username"

    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput "    ‚úÖ ClusterRoleBinding $bindingName —Å–æ–∑–¥–∞–Ω!" "Green"
    } else {
        Write-ColorOutput "    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ClusterRoleBinding $bindingName" "Red"
    }
}

# –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Secret'–æ–≤ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
Write-ColorOutput "üîë –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤" "Yellow"

foreach ($username in $Users.Keys) {
    $secretName = "$username-token"
    $secretFile = "manifests/secret.$username.yaml"

    if (Test-KubernetesResource "secret" $secretName $Namespace) {
        if ($ForceRecreate) {
            Write-ColorOutput "  ‚îî‚îÄ‚îÄ –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Secret: $secretName" "Cyan"
            kubectl delete secret $secretName -n $Namespace
        } else {
            Write-ColorOutput "  ‚îî‚îÄ‚îÄ Secret $secretName —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º" "Yellow"
            continue
        }
    }

    Write-ColorOutput "  ‚îî‚îÄ‚îÄ –°–æ–∑–¥–∞—ë–º Secret –º–∞–Ω–∏—Ñ–µ—Å—Ç: $secretFile" "Cyan"
    $secretContent = New-SecretManifest -UserName $username -Namespace $Namespace
    $secretContent | Out-File -FilePath $secretFile -Encoding UTF8

    Write-ColorOutput "  ‚îî‚îÄ‚îÄ –ü—Ä–∏–º–µ–Ω—è–µ–º Secret: $secretName" "Cyan"
    kubectl apply -f $secretFile

    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput "    ‚úÖ Secret $secretName —Å–æ–∑–¥–∞–Ω!" "Green"
    } else {
        Write-ColorOutput "    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Secret $secretName" "Red"
    }
}

# –®–∞–≥ 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
Write-ColorOutput "üíæ –®–∞–≥ 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤" "Yellow"

# –ñ–¥—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã —Ç–æ–∫–µ–Ω—ã –±—ã–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
Write-ColorOutput "  ‚îî‚îÄ‚îÄ –ñ–¥—ë–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤..." "Cyan"
Start-Sleep -Seconds 5

foreach ($username in $Users.Keys) {
    $secretName = "$username-token"
    $tokenFile = "tokens/$username-token.txt"

    Write-ColorOutput "  ‚îî‚îÄ‚îÄ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è: $username" "Cyan"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–∫—Ä–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫–µ–Ω
    $maxRetries = 10
    $retryCount = 0

    do {
        $token = kubectl get secret $secretName -n $Namespace -o "go-template={{.data.token | base64decode}}" 2>$null

        if ($token -and $token.Length -gt 10) {
            $token | Out-File -FilePath $tokenFile -Encoding UTF8 -NoNewline
            Write-ColorOutput "    ‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è $username —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ $tokenFile" "Green"
            break
        } else {
            $retryCount++
            Write-ColorOutput "    ‚è≥ –ñ–¥—ë–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è $username (–ø–æ–ø—ã—Ç–∫–∞ $retryCount/$maxRetries)" "Yellow"
            Start-Sleep -Seconds 2
        }
    } while ($retryCount -lt $maxRetries)

    if ($retryCount -eq $maxRetries) {
        Write-ColorOutput "    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è $username" "Red"
    }
}

# –®–∞–≥ 6: –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
Write-ColorOutput "üìã –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" "Yellow"

Write-ColorOutput "–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:" "Cyan"
foreach ($username in $Users.Keys) {
    $userInfo = $Users[$username]
    $tokenFile = "tokens/$username-token.txt"

    Write-ColorOutput "  üîπ $username" "White"
    Write-ColorOutput "     ‚îî‚îÄ‚îÄ –†–æ–ª—å: $($userInfo.role)" "Gray"
    Write-ColorOutput "     ‚îî‚îÄ‚îÄ –û–ø–∏—Å–∞–Ω–∏–µ: $($userInfo.description)" "Gray"
    Write-ColorOutput "     ‚îî‚îÄ‚îÄ –¢–æ–∫–µ–Ω: $tokenFile" "Gray"

    if (Test-Path $tokenFile) {
        $tokenLength = (Get-Content $tokenFile -Raw).Length
        Write-ColorOutput "     ‚îî‚îÄ‚îÄ –¢–æ–∫–µ–Ω –≥–æ—Ç–æ–≤ (–¥–ª–∏–Ω–∞: $tokenLength —Å–∏–º–≤–æ–ª–æ–≤)" "Green"
    } else {
        Write-ColorOutput "     ‚îî‚îÄ‚îÄ ‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!" "Red"
    }
}

Write-ColorOutput "üåê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Dashboard:" "Cyan"
Write-ColorOutput "  1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ port-forward:" "White"
Write-ColorOutput "     kubectl -n $Namespace port-forward svc/kubernetes-dashboard-kong-proxy 8443:443" "Gray"
Write-ColorOutput "  2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:" "White"
Write-ColorOutput "     https://localhost:8443" "Gray"
Write-ColorOutput "  3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ tokens/" "White"

Write-ColorOutput "üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤:" "Cyan"
Write-ColorOutput "  tokens/     - —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" "Gray"
Write-ColorOutput "  manifests/  - YAML –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã" "Gray"

Write-ColorOutput "=====================================================" "Blue"
Write-ColorOutput "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" "Green"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞
Write-ColorOutput "üí° –ü–æ–ª–µ–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:" "Yellow"
Write-ColorOutput "  -SkipHelmInstall    : –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É Helm Chart" "Gray"
Write-ColorOutput "  -ForceRecreate      : –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã" "Gray"
Write-ColorOutput "  -Namespace <name>   : –£–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º—ë–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: kubernetes-dashboard)" "Gray"
